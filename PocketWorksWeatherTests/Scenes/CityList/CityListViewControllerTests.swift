//
//  CityListViewControllerTests.swift
//  PocketWorksWeather
//
//  Created by Anh Phan Tran on 28/07/2019.
//  Copyright (c) 2019 Anh Phan Tran. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import PocketWorksWeather
import Quick
import Nimble

class CityListViewControllerSpec: QuickSpec {
  // MARK: - Subject under test:
  var sut: CityListViewController!
  var window: UIWindow!

  // MARK: - Test doubles:
  class CityListBusinessLogicSpy: CityListBusinessLogic {
    var getCityListCalled = false
    var toggleUnitSystemCalled = false
    var registerCityCalled = false
    var registerCityRequest: CityList.RegisterNewCity.Request?
    var removeCityCalled = false

    func getCityList(_ request: CityList.GetCityList.Request) {
      self.getCityListCalled = true
    }

    func toggleUnitSystem(_ request: CityList.ToggleUnitSystem.Request) {
      self.toggleUnitSystemCalled = true
    }

    func registerNewCity(_ request: CityList.RegisterNewCity.Request) {
      self.registerCityCalled = true
      self.registerCityRequest = request
    }
    
    func removeCity(_ request: CityList.RemoveCity.Request) {
      self.removeCityCalled = true
    }
  }

  class TableViewSpy: UITableView {
    var reloadDataCalled = false
    override func reloadData() {
      super.reloadData()
      self.reloadDataCalled = true
    }
  }

  // MARK: - Spec:
  override func spec() {
    describe("CityListViewController") {
      beforeEach {
        self.window = UIWindow()
        let bundle = Bundle.main
        let storyboard = UIStoryboard(name: "Main", bundle: bundle)
        self.sut = storyboard.instantiateViewController(withIdentifier: "CityListViewController") as? CityListViewController
      }

      afterEach {
        self.window = nil
      }

      func loadView() {
        self.window.addSubview(self.sut.view)
        RunLoop.current.run(until: Date())
      }

      context("when view is loaded") {
        it("should ask interactor to get the city list") {
          let spy = CityListBusinessLogicSpy()
          self.sut.interactor = spy

          loadView()
          
          expect(spy.getCityListCalled).to(beTrue())
        }
      }

      context("when action cell asked to change unit system") {
        it("should ask interactor to update app's unit system") {
          let spy = CityListBusinessLogicSpy()
          self.sut.interactor = spy
          loadView()

          let cell = CityListActionCell(frame: CGRect.zero)
          self.sut.toggleUnitSystem(to: .metric, on: cell)

          expect(spy.toggleUnitSystemCalled).to(beTrue())
        }
      }

      context("when displaying city list") {
        it("should have correct data for table view") {
          loadView()
          var cityListCellVMs = [CityListCellVM]()
          let itemCell = CityListItemCell.ViewModel(localTime: SystemDateWithOffsetLabel.ViewModel(dateFormat: "HH:mm",
                                                                                                   timezoneOffset: 0),
                                                    cityName: "Ha Noi",
                                                    temperature: "30")
          cityListCellVMs.append(itemCell)
          let actionCell = CityListActionCell.ViewModel(metricSystemButtonSelected: true, imperialSystemButtonSelected: false)
          cityListCellVMs.append(actionCell)
          let viewModel = CityList.GetCityList.ViewModel(cityList: cityListCellVMs)

          self.sut.displayGetCityList(viewModel)

          let numberOfSections = self.sut.numberOfSections(in: self.sut.cityListTableView)
          expect(numberOfSections).to(equal(1))

          let numberOfItems = self.sut.tableView(self.sut.cityListTableView, numberOfRowsInSection: 0)
          expect(numberOfItems).to(equal(2))

          let indexPathForActionItem = IndexPath(row: 1, section: 0)
          let canEditActionItem = self.sut.tableView(self.sut.cityListTableView, canEditRowAt: indexPathForActionItem)
          expect(canEditActionItem).to(beFalse())
          let editingStyleActionItem = self.sut.tableView(self.sut.cityListTableView, editingStyleForRowAt: indexPathForActionItem)
          expect(editingStyleActionItem).to(equal(UITableViewCell.EditingStyle.none))

          let indexPathForCityItem = IndexPath(row: 0, section: 0)
          let canEditCityItem = self.sut.tableView(self.sut.cityListTableView, canEditRowAt: indexPathForCityItem)
          expect(canEditCityItem).to(beTrue())
          let editingStyleCityItem = self.sut.tableView(self.sut.cityListTableView, editingStyleForRowAt: indexPathForCityItem)
          expect(editingStyleCityItem).to(equal(UITableViewCell.EditingStyle.delete))
        }

        it("should assign view model list and ask table view to reload data") {
          loadView()
          var cityListCellVMs = [CityListCellVM]()
          let actionCell = CityListActionCell.ViewModel(metricSystemButtonSelected: true, imperialSystemButtonSelected: false)
          cityListCellVMs.append(actionCell)
          let viewModel = CityList.GetCityList.ViewModel(cityList: cityListCellVMs)
          let spy = TableViewSpy()
          self.sut.cityListTableView = spy

          self.sut.displayGetCityList(viewModel)

          expect(spy.reloadDataCalled).to(beTrue())
        }
      }

      context("when register for new city") {
        it("should ask interactor to handle registering a new city") {
          let spy = CityListBusinessLogicSpy()
          self.sut.interactor = spy
          loadView()

          self.sut.register(newCity: Seed.hanoi)

          expect(spy.registerCityCalled).to(beTrue())
          expect(spy.registerCityRequest).toNot(beNil())
        }
      }

      context("when delete action on a city is commited") {
        it("should ask interactor to remove this city") {
          let spy = CityListBusinessLogicSpy()
          self.sut.interactor = spy
          loadView()
          var cityListCellVMs = [CityListCellVM]()
          let itemCell = CityListItemCell.ViewModel(localTime: SystemDateWithOffsetLabel.ViewModel(dateFormat: "HH:mm",
                                                                                                   timezoneOffset: 0),
                                                    cityName: "Ha Noi",
                                                    temperature: "30")
          cityListCellVMs.append(itemCell)
          let actionCell = CityListActionCell.ViewModel(metricSystemButtonSelected: true, imperialSystemButtonSelected: false)
          cityListCellVMs.append(actionCell)
          let viewModel = CityList.GetCityList.ViewModel(cityList: cityListCellVMs)
          self.sut.displayGetCityList(viewModel)

          let indexPath = IndexPath(row: 0, section: 0)
          self.sut.tableView(self.sut.cityListTableView, commit: .delete, forRowAt: indexPath)

          expect(spy.removeCityCalled).to(beTrue())
        }
      }
    }
  }
}
