//
//  CityListPresenterTests.swift
//  PocketWorksWeather
//
//  Created by Anh Phan Tran on 28/07/2019.
//  Copyright (c) 2019 Anh Phan Tran. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import PocketWorksWeather
import Quick
import Nimble

class CityListPresenterSpec: QuickSpec {
  // MARK: - Subject under test
  var sut: CityListPresenter!

  // MARK: - Test doubles
  class CityListDisplayLogicSpy: CityListDisplayLogic {
    var displayGetCityListCalled = false
    var displayGetCityListVM: CityList.GetCityList.ViewModel?
    var displayRegisterNewCityCalled = false
    var displayRegisterNewCityVM: CityList.RegisterNewCity.ViewModel?
    var displayReloadWeatherDataCalled = false
    var displayReloadWeatherDataVM: CityList.ReloadWeatherData.ViewModel?
    var displaySelectCityCalled = false
    var displayShowErrorCalled = false

    func displayGetCityList(_ viewModel: CityList.GetCityList.ViewModel) {
      self.displayGetCityListCalled = true
      self.displayGetCityListVM = viewModel
    }

    func displayRegisterNewCity(_ viewModel: CityList.RegisterNewCity.ViewModel) {
      self.displayRegisterNewCityCalled = true
      self.displayRegisterNewCityVM = viewModel
    }

    func displayReloadWeatherData(_ viewModel: CityList.ReloadWeatherData.ViewModel) {
      self.displayReloadWeatherDataCalled = true
      self.displayReloadWeatherDataVM = viewModel
    }

    func displaySelectCity(_ viewModel: CityList.SelectCity.ViewModel) {
      self.displaySelectCityCalled = true
    }

    func displayShowError(_ viewModel: CityList.ShowError.ViewModel) {
      self.displayShowErrorCalled = true
    }
  }

  // MARK: - Spec:
  override func spec() {
    describe("CityListPresenter") {
      beforeEach {
        self.sut = CityListPresenter()
      }

      context("when show error") {
        it("should ask view controller to alert the error") {
          let spy = CityListDisplayLogicSpy()
          self.sut.viewController = spy

          let error = NSError(domain: "some domain", code: 30, userInfo: nil)
          let response = CityList.ShowError.Response(error: error as Error)

          self.sut.presentShowError(response)

          expect(spy.displayShowErrorCalled).to(beTrue())
        }
      }

      context("when a city is selected") {
        it("should ask view controller to route") {
          let spy = CityListDisplayLogicSpy()
          self.sut.viewController = spy

          let response = CityList.SelectCity.Response()
          self.sut.presentSelectCity(response)
  
          expect(spy.displaySelectCityCalled).to(beTrue())
        }
      }

      context("when present get city list") {
        it("should format list and ask view controller to display the formatted list") {
          let spy = CityListDisplayLogicSpy()
          self.sut.viewController = spy
          PWSession.shared.unitSystem = .metric
          let response = CityList.GetCityList.Response(weatherData: [Seed.hanoiWeatherData],
                                                       unitSystem: .metric)

          self.sut.presentGetCityList(response)

          expect(spy.displayGetCityListCalled).to(beTrue())
          expect(spy.displayGetCityListVM).toNot(beNil())
          expect(spy.displayGetCityListVM?.cityList.count).to(equal(2))
          expect(spy.displayGetCityListVM?.cityList.first).to(beAKindOf(CityListItemCell.ViewModel.self))

          let itemCellVM = spy.displayGetCityListVM?.cityList.first as? CityListItemCell.ViewModel

          expect(itemCellVM?.cityName).to(equal(Seed.hanoiWeatherData.name))
          expect(itemCellVM?.localTime.timezoneOffset).to(equal(Seed.hanoiWeatherData.sys?.timezone))
          let windString = NSMutableAttributedString()
          let windDirectionString = NSAttributedString(string: "ESE ")
            .applyForegroundColor(.white)
            .applyFont(UIFont.systemFont(ofSize: 30, weight: .medium))
          windString.append(windDirectionString)
          let windSpeedString = NSAttributedString(string: "5 m/s")
            .applyFont(UIFont.systemFont(ofSize: 40, weight: .thin))
            .applyForegroundColor(.white)
          windString.append(windSpeedString)
          expect(itemCellVM?.windDirectionString).to(equal(windString))
  
          expect(spy.displayGetCityListVM?.cityList[1]).to(beAKindOf(CityListActionCell.ViewModel.self))

          let actionCellVM = spy.displayGetCityListVM?.cityList[1] as? CityListActionCell.ViewModel
          expect(actionCellVM?.metricSystemButtonSelected).to(beTrue())
          expect(actionCellVM?.imperialSystemButtonSelected).to(beFalse())
        }
      }

      context("when present register new city") {
        it("should format the response and ask view controller to display") {
          let spy = CityListDisplayLogicSpy()
          self.sut.viewController = spy
          PWSession.shared.unitSystem = .metric

          let response = CityList.RegisterNewCity.Response(weatherData: Seed.hanoiWeatherData)

          self.sut.presentRegisterNewCity(response)

          expect(spy.displayRegisterNewCityCalled).to(beTrue())
          expect(spy.displayRegisterNewCityVM).toNot(beNil())
          expect(spy.displayRegisterNewCityVM?.cellVM).to(beAKindOf(CityListItemCell.ViewModel.self))
          let itemCellVM = spy.displayRegisterNewCityVM?.cellVM as? CityListItemCell.ViewModel
          
          expect(itemCellVM?.cityName).to(equal(Seed.hanoiWeatherData.name))
          expect(itemCellVM?.localTime.timezoneOffset).to(equal(Seed.hanoiWeatherData.sys?.timezone))
          let windString = NSMutableAttributedString()
          let windDirectionString = NSAttributedString(string: "ESE ")
            .applyForegroundColor(.white)
            .applyFont(UIFont.systemFont(ofSize: 30, weight: .medium))
          windString.append(windDirectionString)
          let windSpeedString = NSAttributedString(string: "5 m/s")
            .applyFont(UIFont.systemFont(ofSize: 40, weight: .thin))
            .applyForegroundColor(.white)
          windString.append(windSpeedString)
          expect(itemCellVM?.windDirectionString).to(equal(windString))
        }
      }

      context("when present reload weather data") {
        it("should pass the response and ask view controller to display") {
          let spy = CityListDisplayLogicSpy()
          self.sut.viewController = spy
          let response = CityList.ReloadWeatherData.Response(isReloading: true)

          self.sut.presentReloadWeatherData(response)

          expect(spy.displayReloadWeatherDataCalled).to(beTrue())
          expect(spy.displayReloadWeatherDataVM).toNot(beNil())
          expect(spy.displayReloadWeatherDataVM?.isReloading).to(beTrue())
        }
      }
    }
  }
}
