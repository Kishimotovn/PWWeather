//
//  CityDetailsViewControllerTests.swift
//  PocketWorksWeather
//
//  Created by Anh Phan Tran on 29/07/2019.
//  Copyright (c) 2019 Anh Phan Tran. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import PocketWorksWeather
import Quick
import Nimble

class CityDetailsViewControllerSpec: QuickSpec {
  // MARK: - Subject under test:
  var sut: CityDetailsViewController!
  var window: UIWindow!

  // MARK: - Test doubles:
  class CityDetailsBusinessLogicSpy: CityDetailsBusinessLogic {
    var showWeatherCalled = false
    var getForecastsDataCalled = false

    var openWeatherURL: URL? {
      return URL(string: "https:www.google.com")
    }

    func showWeather(_ request: CityDetails.ShowWeather.Request) {
      self.showWeatherCalled = true
    }

    func getForecastsData(_ request: CityDetails.GetForecastData.Request) {
      self.getForecastsDataCalled = true
    }
  }

  class CollectionViewSpy: UICollectionView {
    var reloadDataCalled = false
    override func reloadData() {
      super.reloadData()
      self.reloadDataCalled = true
    }
  }

  // MARK: - Spec:
  override func spec() {
    describe("CityDetailsViewController") {
      beforeEach {
        self.window = UIWindow()
        let bundle = Bundle.main
        let storyboard = UIStoryboard(name: "Main", bundle: bundle)
        self.sut = storyboard.instantiateViewController(withIdentifier: "CityDetailsViewController") as? CityDetailsViewController
        self.sut.interactor = nil
      }

      afterEach {
        self.window = nil
      }

      func loadView() {
        self.window.addSubview(self.sut.view)
        RunLoop.current.run(until: Date())
      }
  
      context("when view load") {
        it("should ask interactor to show weather data and load weather forecast") {
          let spy = CityDetailsBusinessLogicSpy()
          self.sut.interactor = spy

          loadView()

          expect(spy.showWeatherCalled).to(beTrue())
        }
      }

      context("when display get forecast data") {
        it("should update collection view datasource and reload") {
          let windForecastCellVM = WindForecastCell.ViewModel(time: "12:12", imageUrl: nil, windInfo: NSAttributedString(string: "some string"))
          let viewModel = CityDetails.GetForecastData.ViewModel(forecastVMs: [windForecastCellVM])
          loadView()
          
          let spy = CollectionViewSpy(frame: .zero, collectionViewLayout: UICollectionViewLayout())
          self.sut.forecastsCollectionView = spy

          self.sut.displayGetForecastData(viewModel)

          expect(self.sut.forecastsVMs.count).to(equal(1))
          expect(spy.reloadDataCalled).toEventually(beTrue())
        }

        it("should populate collection view correctly") {
          loadView()
          let windForecastCellVM = WindForecastCell.ViewModel(time: "12:12", imageUrl: nil, windInfo: NSAttributedString(string: "some string"))
          let viewModel = CityDetails.GetForecastData.ViewModel(forecastVMs: [windForecastCellVM])
          self.sut.displayGetForecastData(viewModel)

          let numberOfSection = self.sut.numberOfSections(in: self.sut.forecastsCollectionView)
          expect(numberOfSection).to(equal(1))
          
          let numberOfItems = self.sut.collectionView(self.sut.forecastsCollectionView, numberOfItemsInSection: 0)
          expect(numberOfItems).to(equal(1))

          let indexPath = IndexPath(row: 0, section: 0)
          let cell = self.sut.collectionView(self.sut.forecastsCollectionView, cellForItemAt: indexPath)
          expect(cell).to(beAKindOf(WindForecastCell.self))
        }
      }

      context("when display show weather") {
        it("should update UI") {
          loadView()
          let viewModel = CityDetails.ShowWeather.ViewModel(
            cityName: "city name",
            mainWeather: "main weather",
            windInfo: NSAttributedString(string: "wind Info"),
            weekDay: "week day",
            maximumTemp: "maximum temp",
            minimumTemp: "minimum temp",
            weatherDescription: "weather description",
            currentTemperature: "current temperature",
            humidityLevel: "humidity level",
            sunrise: "sun rise",
            sunset: "sun set",
            pressure: "pressure",
            visibility: "visibility")
          self.sut.displayShowWeather(viewModel)

          expect(self.sut.cityNameLabel.text).to(equal("city name"))
          expect(self.sut.mainWeatherLabel.text).to(equal("main weather"))
          expect(self.sut.windInfoLabel.attributedText).to(equal(NSAttributedString(string: "wind Info")))
          expect(self.sut.weekDayLabel.text).to(equal("week day"))
          expect(self.sut.maximumTempLabel.text).to(equal("maximum temp"))
          expect(self.sut.minimumTempLabel.text).to(equal("minimum temp"))
          expect(self.sut.weatherDescriptionLabel.text).to(equal("weather description"))
          expect(self.sut.currentTemperatureLabel.text).to(equal("current temperature"))
          expect(self.sut.humidityLabel.text).to(equal("humidity level"))
          expect(self.sut.sunriseLabel.text).to(equal("sun rise"))
          expect(self.sut.sunsetLabel.text).to(equal("sun set"))
          expect(self.sut.pressureLabel.text).to(equal("pressure"))
          expect(self.sut.visibilityLabel.text).to(equal("visibility"))
        }
        
        it("should ask interactor to get forecast data") {
          let spy = CityDetailsBusinessLogicSpy()
          self.sut.interactor = spy

          loadView()
          let viewModel = CityDetails.ShowWeather.ViewModel(
            cityName: "city name",
            mainWeather: "main weather",
            windInfo: NSAttributedString(string: "wind Info"),
            weekDay: "week day",
            maximumTemp: "maximum temp",
            minimumTemp: "minimum temp",
            weatherDescription: "weather description",
            currentTemperature: "current temperature",
            humidityLevel: "humidity level",
            sunrise: "sun rise",
            sunset: "sun set",
            pressure: "pressure",
            visibility: "visibility")
          self.sut.displayShowWeather(viewModel)

          expect(spy.getForecastsDataCalled).to(beTrue())
        }
      }

      context("when display toggle forecast loading") {
        it("should toggle activity indicator") {
          let toggled = Bool.random()
          let viewModel = CityDetails.ToggleForecastLoading.ViewModel(isLoading: toggled)
          loadView()
          
          self.sut.displayToggleForecastLoading(viewModel)

          expect(self.sut.activityIndicator.isAnimating).toEventually(equal(toggled))
        }
      }

      context("when reload forecast data") {
        it("should ask interactor to get forecast data") {
          let spy = CityDetailsBusinessLogicSpy()
          self.sut.interactor = spy
          loadView()
          
          self.sut.reloadForecastData()
          
          expect(spy.getForecastsDataCalled).to(beTrue())
        }
      }
    }
  }
}
