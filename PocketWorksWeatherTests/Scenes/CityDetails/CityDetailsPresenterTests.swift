//
//  CityDetailsPresenterTests.swift
//  PocketWorksWeather
//
//  Created by Anh Phan Tran on 29/07/2019.
//  Copyright (c) 2019 Anh Phan Tran. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import PocketWorksWeather
import Quick
import Nimble

class CityDetailsPresenterSpec: QuickSpec {
  // MARK: - Subject under test
  var sut: CityDetailsPresenter!

  // MARK: - Test doubles
  class CityDetailsDisplayLogicSpy: CityDetailsDisplayLogic {
    var displayShowWeatherCalled = false
    var displayShowWeatherVM: CityDetails.ShowWeather.ViewModel?
    var displayGetForecastDataCalled = false
    var displayGetForecastDataVM: CityDetails.GetForecastData.ViewModel?
    var displayToggleForecastLoadingCalled = false
    var displayToggleForecastLoadingVM: CityDetails.ToggleForecastLoading.ViewModel?
    var displayShowErrorCalled = false
    var displayShowErrorVM: CityDetails.ShowError.ViewModel?

    func displayShowWeather(_ viewModel: CityDetails.ShowWeather.ViewModel) {
      self.displayShowWeatherVM = viewModel
      self.displayShowWeatherCalled = true
    }

    func displayGetForecastData(_ viewModel: CityDetails.GetForecastData.ViewModel) {
      self.displayGetForecastDataVM = viewModel
      self.displayGetForecastDataCalled = true
    }

    func displayToggleForecastLoading(_ viewModel: CityDetails.ToggleForecastLoading.ViewModel) {
      self.displayToggleForecastLoadingVM = viewModel
      self.displayToggleForecastLoadingCalled = true
    }

    func displayShowError(_ viewModel: CityDetails.ShowError.ViewModel) {
      self.displayShowErrorVM = viewModel
      self.displayShowErrorCalled = true
    }
  }

  // MARK: - Spec:
  override func spec() {
    describe("CityDetailsPresenter") {
      beforeEach {
        self.sut = CityDetailsPresenter()
      }

      context("when present show weather") {
        it("should format weather data and ask view controller to display view model") {
          let spy = CityDetailsDisplayLogicSpy()
          self.sut.viewController = spy

          let response = CityDetails.ShowWeather.Response(weatherData: Seed.hanoiWeatherData)

          self.sut.presentShowWeather(response)

          expect(spy.displayShowWeatherCalled).to(beTrue())
          expect(spy.displayShowWeatherVM).toNot(beNil())
          expect(spy.displayShowWeatherVM?.cityName).to(equal("Ha Noi"))
          expect(spy.displayShowWeatherVM?.currentTemperature).to(equal("30°"))
          expect(spy.displayShowWeatherVM?.humidityLevel).to(equal("74%"))
          expect(spy.displayShowWeatherVM?.mainWeather).to(equal("Clear"))
          expect(spy.displayShowWeatherVM?.maximumTemp).to(equal("30°"))
          expect(spy.displayShowWeatherVM?.minimumTemp).to(equal("30°"))
          expect(spy.displayShowWeatherVM?.pressure).to(equal("1,004 hPa"))
          expect(spy.displayShowWeatherVM?.sunrise).to(equal("05:28"))
          expect(spy.displayShowWeatherVM?.sunset).to(equal("18:37"))
          expect(spy.displayShowWeatherVM?.visibility).to(equal("10 km"))
          expect(spy.displayShowWeatherVM?.weatherDescription).to(equal("Today: clear sky. It's 30°; the high today was forecast as 30°"))
          expect(spy.displayShowWeatherVM?.weekDay).to(equal("Tuesday"))
          let windString = NSMutableAttributedString()
          let windDirectionString = NSAttributedString(string: "ESE ")
            .applyForegroundColor(.white)
            .applyFont(UIFont.systemFont(ofSize: 33, weight: .medium))
          windString.append(windDirectionString)
          let windSpeedString = NSAttributedString(string: "5 m/s")
            .applyFont(UIFont.systemFont(ofSize: 46.2, weight: .thin))
            .applyForegroundColor(.white)
          windString.append(windSpeedString)
          expect(spy.displayShowWeatherVM?.windInfo).to(equal(windString))
        }
      }

      context("when present get forecast data") {
        it("should format the forecast data and ask view controller to display") {
          let spy = CityDetailsDisplayLogicSpy()
          self.sut.viewController = spy

          let response = CityDetails.GetForecastData.Response(forecastData: [Seed.hanoiWeatherData], timezoneOffset: 0.0)

          self.sut.presentGetForecastData(response)
  
          expect(spy.displayGetForecastDataCalled).to(beTrue())
          expect(spy.displayGetForecastDataVM).toNot(beNil())
          let vm = spy.displayGetForecastDataVM

          expect(vm?.forecastVMs.count).to(equal(1))
          expect(vm?.forecastVMs.first?.time).to(equal("15:09"))
          let windString = NSMutableAttributedString()
          let windDirectionString = NSAttributedString(string: "ESE ")
            .applyForegroundColor(.white)
            .applyFont(UIFont.systemFont(ofSize: 12, weight: .medium))
          windString.append(windDirectionString)
          let windSpeedString = NSAttributedString(string: "5 m/s")
            .applyFont(UIFont.systemFont(ofSize: 12*1.4, weight: .thin))
            .applyForegroundColor(.white)
          windString.append(windSpeedString)
          expect(vm?.forecastVMs.first?.windInfo).to(equal(windString))
          expect(vm?.forecastVMs.first?.imageUrl?.absoluteString).to(equal("http://openweathermap.org/img/wn/01n@2x.png"))
        }
      }

      context("when present toggle forecast loading") {
        it("should pass the signal to view controller and ask view controller to display") {
          let spy = CityDetailsDisplayLogicSpy()
          self.sut.viewController = spy

          let isLoading = Bool.random()
          let response = CityDetails.ToggleForecastLoading.Response(isLoading: isLoading)

          self.sut.presentToggleForecastLoading(response)

          expect(spy.displayToggleForecastLoadingCalled).to(beTrue())
          expect(spy.displayToggleForecastLoadingVM?.isLoading).to(equal(isLoading))
        }
      }

      context("when present show error") {
        it("show format the error and ask view controller to display") {
          let spy = CityDetailsDisplayLogicSpy()
          self.sut.viewController = spy

          let error = NSError(domain: "some domain", code: 1, userInfo: nil)
          let response = CityDetails.ShowError.Response(error: error as Error)

          self.sut.presentShowError(response)

          expect(spy.displayShowErrorCalled).to(beTrue())
          expect(spy.displayShowErrorVM).toNot(beNil())
          expect(spy.displayShowErrorVM?.errorString).to(equal(error.localizedDescription))
        }
      }
    }
  }
}
