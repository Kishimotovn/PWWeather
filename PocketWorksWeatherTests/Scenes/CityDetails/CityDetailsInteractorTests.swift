//
//  CityDetailsInteractorTests.swift
//  PocketWorksWeather
//
//  Created by Anh Phan Tran on 29/07/2019.
//  Copyright (c) 2019 Anh Phan Tran. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import PocketWorksWeather
import Quick
import Nimble

class CityDetailsInteractorSpec: QuickSpec {
  // MARK: - Subject under test:
  var sut: CityDetailsInteractor!

  // MARK: - Test doubles:
  class CityDetailsPresentationLogicSpy: CityDetailsPresentationLogic {
    var presentShowWeatherCalled = false
    var presentShowWeatherResponse: CityDetails.ShowWeather.Response?
    var presentGetForecastDataCalled = false
    var presentGetForecastResponse: CityDetails.GetForecastData.Response?
    var presentToggleForecastLoadingCalled = false
    var presentToggleForecastLoadingResponses: [Bool] = []
    var presentShowErrorCalled = false
    var presentShowErrorResponse: CityDetails.ShowError.Response?

    func presentShowWeather(_ response: CityDetails.ShowWeather.Response) {
      self.presentShowWeatherResponse = response
      self.presentShowWeatherCalled = true
    }
    
    func presentGetForecastData(_ response: CityDetails.GetForecastData.Response) {
      self.presentGetForecastDataCalled = true
      self.presentGetForecastResponse = response
    }
    
    func presentToggleForecastLoading(_ response: CityDetails.ToggleForecastLoading.Response) {
      self.presentToggleForecastLoadingCalled = true
      self.presentToggleForecastLoadingResponses.append(response.isLoading)
    }
    
    func presentShowError(_ response: CityDetails.ShowError.Response) {
      self.presentShowErrorResponse = response
      self.presentShowErrorCalled = true
    }
  }

  // MARK: - Spec:
  override func spec() {
    describe("CityDetailsInteractor") {
      beforeEach {
        self.sut = CityDetailsInteractor()
        self.sut.city = Seed.hanoi
        self.sut.weatherData = Seed.hanoiWeatherData
      }

      context("when show weather is requested") {
        it("should pass weather data to presenter to format") {
          let spy = CityDetailsPresentationLogicSpy()
          self.sut.presenter = spy

          let request = CityDetails.ShowWeather.Request()
          self.sut.showWeather(request)

          expect(spy.presentShowWeatherCalled).to(beTrue())
          expect(spy.presentShowWeatherResponse).toNot(beNil())
          expect(spy.presentShowWeatherResponse?.weatherData).to(equal(Seed.hanoiWeatherData))
        }
      }
      
      context("when requesting forecast data") {
        it("should toggle forecast loading") {
          let spy = CityDetailsPresentationLogicSpy()
          self.sut.presenter = spy
          let worker = CityDetailsWorker(apiService: StubbedPWAPIService())
          self.sut.worker = worker

          let request = CityDetails.GetForecastData.Request()

          self.sut.getForecastsData(request)

          expect(spy.presentToggleForecastLoadingCalled).to(beTrue())
          expect(spy.presentToggleForecastLoadingResponses).toEventually(equal([true, false]), timeout: 2)
        }
        
        it("should ask presenter to present the result if found") {
          let spy = CityDetailsPresentationLogicSpy()
          self.sut.presenter = spy
          let worker = CityDetailsWorker(apiService: StubbedPWAPIService())
          self.sut.worker = worker
          let request = CityDetails.GetForecastData.Request()
          
          self.sut.getForecastsData(request)

          expect(spy.presentGetForecastDataCalled).toEventually(beTrue(), timeout: 2)
          expect(spy.presentGetForecastResponse).toEventuallyNot(beNil(), timeout: 2)
          expect(spy.presentGetForecastResponse?.forecastData).toEventually(equal([Seed.hanoiWeatherData]), timeout: 2)
          expect(self.sut.currentForecastResponse).toEventually(equal([Seed.hanoiWeatherData]), timeout: 2)
          expect(spy.presentGetForecastResponse?.timezoneOffset).toEventually(equal(25200), timeout: 2)
  
          expect(spy.presentShowErrorCalled).toEventuallyNot(beTrue(), timeout: 2)
        }

        it("should ask presenter to present error if there is error") {
          let spy = CityDetailsPresentationLogicSpy()
          self.sut.presenter = spy
          let error = NSError(domain: "some domain", code: 1, userInfo: nil)
          let worker = CityDetailsWorker(apiService: StubbedPWAPIService(error: error as Error))
          self.sut.worker = worker
          let request = CityDetails.GetForecastData.Request()
          
          self.sut.getForecastsData(request)

          expect(spy.presentShowErrorCalled).toEventually(beTrue(), timeout: 2)
          expect(spy.presentShowErrorResponse).toEventuallyNot(beNil(), timeout: 2)
          expect(spy.presentShowErrorResponse?.error).toEventually(be(error), timeout: 2)

          expect(spy.presentGetForecastDataCalled).toEventuallyNot(beTrue(), timeout: 2)
        }
      }
    }
  }
}
