//
//  CitySearchPresenterTests.swift
//  PocketWorksWeather
//
//  Created by Anh Phan Tran on 27/07/2019.
//  Copyright (c) 2019 Anh Phan Tran. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import PocketWorksWeather
import Quick
import Nimble

class CitySearchPresenterSpec: QuickSpec {
  // MARK: - Subject under test
  var sut: CitySearchPresenter!

  // MARK: - Test doubles
  class CitySearchDisplayLogicSpy: CitySearchDisplayLogic {
    var displayUpdateResultsCalled = false
    var displayUpdateResultsVM: CitySearch.UpdateResults.ViewModel?
    var displayValidatingCityNameCalled = false

    func displayUpdateResults(_ viewModel: CitySearch.UpdateResults.ViewModel) {
      self.displayUpdateResultsCalled = true
      self.displayUpdateResultsVM = viewModel
    }

    func displayValidatingCityName(_ viewModel: CitySearch.ValidatingCityName.ViewModel) {
      self.displayValidatingCityNameCalled = true
    }
  }

  // MARK: - Spec:
  override func spec() {
    describe("CitySearchPresenter") {
      beforeEach {
        self.sut = CitySearchPresenter()
      }

      context("when present update results") {
        it("should format results and ask view controller to display results") {
          let response = CitySearch.UpdateResults.Response(searchTerm: "Ha",
                                                           results: [Seed.hanoi])
          let spy = CitySearchDisplayLogicSpy()
          self.sut.viewController = spy

          self.sut.presentUpdateResults(response)

          expect(spy.displayUpdateResultsCalled).to(beTrue())
          expect(spy.displayUpdateResultsVM).toNot(beNil())
          expect(spy.displayUpdateResultsVM?.results.count).to(be(1))
          expect(spy.displayUpdateResultsVM?.results.first?.cityName.string).to(be(Seed.hanoi.name))
          expect(spy.displayUpdateResultsVM?.results.first?.cityName.attribute(.font, at: 0, effectiveRange: nil)).to(be(UIFont.systemFont(ofSize: 18, weight: .bold)))
          expect(spy.displayUpdateResultsVM?.results.first?.cityName.attribute(.font, at: 3, effectiveRange: nil)).to(be(UIFont.systemFont(ofSize: 18)))
        }
      }
    }
  }
}
