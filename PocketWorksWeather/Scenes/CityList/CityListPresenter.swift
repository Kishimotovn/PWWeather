//
//  CityListPresenter.swift
//  PocketWorksWeather
//
//  Created by Anh Phan Tran on 27/07/2019.
//  Copyright (c) 2019 Anh Phan Tran. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CityListPresentationLogic {
  func presentGetCityList(_ response: CityList.GetCityList.Response)
  func presentRegisterNewCity(_ response: CityList.RegisterNewCity.Response)
}

class CityListPresenter: CityListPresentationLogic {
  // MARK: - Model:
  weak var viewController: CityListDisplayLogic?

  // MARK: - Public Funcs (Use cases):
  func presentGetCityList(_ response: CityList.GetCityList.Response) {
    var cellVMs = [CityListCellVM]()

    let itemCells = response.weatherData.map(self.buildItemCell)
    cellVMs.append(contentsOf: itemCells)

    let actionCell = self.buildActionCellVM(with: response.unitSystem)
    cellVMs.append(actionCell)

    let viewModel = CityList.GetCityList.ViewModel(cityList: cellVMs)
    self.viewController?.displayGetCityList(viewModel)
  }

  func presentRegisterNewCity(_ response: CityList.RegisterNewCity.Response) {
    let cellVM = self.buildItemCell(with: response.weatherData)
    let viewModel = CityList.RegisterNewCity.ViewModel(cellVM: cellVM)
    self.viewController?.displayRegisterNewCity(viewModel)
  }

  // MARK: - Private Funcs:
  private func buildActionCellVM(with unitSystem: PWUnitSystem) -> CityListActionCell.ViewModel {
    return CityListActionCell.ViewModel(
      metricSystemButtonSelected: unitSystem == .metric,
      imperialSystemButtonSelected: unitSystem == .imperial)
  }

  private func buildItemCell(with response: CityWeatherResponse) -> CityListItemCell.ViewModel {
    var localTime = SystemDateWithOffsetLabel.ViewModel(dateFormat: "HH:mm",
                                                        timezoneOffset: 0.0)
    if let timezoneOffset = response.timezone {
      localTime = SystemDateWithOffsetLabel.ViewModel(dateFormat: "HH:mm",
                                                      timezoneOffset: timezoneOffset)
    }
    let cityName = response.name ?? ""
    var temperature = "N/A"
    if let temp = response.main?.temp {
      temperature = "\(temp)Â°"
    }
    return CityListItemCell.ViewModel(
      localTime: localTime,
      cityName: cityName,
      temperature: temperature)
  }
}
