//
//  CityListPresenter.swift
//  PocketWorksWeather
//
//  Created by Anh Phan Tran on 27/07/2019.
//  Copyright (c) 2019 Anh Phan Tran. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CityListPresentationLogic {
  func presentGetCityList(_ response: CityList.GetCityList.Response)
  func presentRegisterNewCity(_ response: CityList.RegisterNewCity.Response)
  func presentReloadWeatherData(_ response: CityList.ReloadWeatherData.Response)
  func presentSelectCity(_ response: CityList.SelectCity.Response)
  func presentShowError(_ response: CityList.ShowError.Response)
}

class CityListPresenter: CityListPresentationLogic {
  // MARK: - Model:
  weak var viewController: CityListDisplayLogic?

  // MARK: - Public Funcs (Use cases):
  func presentGetCityList(_ response: CityList.GetCityList.Response) {
    var cellVMs = [CityListCellVM]()

    let itemCells = response.weatherData.map(self.buildItemCell)
    cellVMs.append(contentsOf: itemCells)

    let actionCell = self.buildActionCellVM(with: response.unitSystem)
    cellVMs.append(actionCell)

    let viewModel = CityList.GetCityList.ViewModel(cityList: cellVMs)
    self.viewController?.displayGetCityList(viewModel)
  }

  func presentRegisterNewCity(_ response: CityList.RegisterNewCity.Response) {
    let cellVM = self.buildItemCell(with: response.weatherData)
    let viewModel = CityList.RegisterNewCity.ViewModel(cellVM: cellVM)
    self.viewController?.displayRegisterNewCity(viewModel)
  }

  func presentReloadWeatherData(_ response: CityList.ReloadWeatherData.Response) {
    let viewModel = CityList.ReloadWeatherData.ViewModel(isReloading: response.isReloading)
    self.viewController?.displayReloadWeatherData(viewModel)
  }

  func presentSelectCity(_ response: CityList.SelectCity.Response) {
    let viewModel = CityList.SelectCity.ViewModel()
    self.viewController?.displaySelectCity(viewModel)
  }

  func presentShowError(_ response: CityList.ShowError.Response) {
    let viewModel = CityList.ShowError.ViewModel(errorString: response.error.localizedDescription)
    self.viewController?.displayShowError(viewModel)
  }

  // MARK: - Private Funcs:
  private func buildActionCellVM(with unitSystem: PWUnitSystem) -> CityListActionCell.ViewModel {
    return CityListActionCell.ViewModel(
      metricSystemButtonSelected: unitSystem == .metric,
      imperialSystemButtonSelected: unitSystem == .imperial)
  }

  private func buildItemCell(with response: CityWeatherResponse) -> CityListItemCell.ViewModel {
    var localTime = SystemDateWithOffsetLabel.ViewModel(dateFormat: "HH:mm",
                                                        timezoneOffset: 0.0)
    if let timezoneOffset = response.sys?.timezone {
      localTime = SystemDateWithOffsetLabel.ViewModel(dateFormat: "HH:mm",
                                                      timezoneOffset: timezoneOffset)
    }
    let cityName = response.name ?? ""

    let windSpeed = response.wind?.speed ?? 0.0
    let windDirectionString = NSMutableAttributedString()
    if let windDirection = response.wind?.deg {
      let direction = WindDirection(windDirection)
      let directionString = NSAttributedString(string: "\(direction) ".uppercased())
        .applyForegroundColor(.white)
        .applyFont(UIFont.systemFont(ofSize: 30, weight: .medium))
      windDirectionString.append(directionString)
    }
    let windSpeedString = NSAttributedString(string: windSpeed.windSpeedString(for: PWSession.shared.unitSystem))
      .applyFont(UIFont.systemFont(ofSize: 40, weight: .thin))
      .applyForegroundColor(.white)
    windDirectionString.append(windSpeedString)

    return CityListItemCell.ViewModel(
      localTime: localTime,
      cityName: cityName,
      windDirectionString: windDirectionString)
  }
}
