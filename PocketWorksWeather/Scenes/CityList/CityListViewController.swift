//
//  CityListViewController.swift
//  PocketWorksWeather
//
//  Created by Anh Phan Tran on 27/07/2019.
//  Copyright (c) 2019 Anh Phan Tran. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CityListDisplayLogic: class {
  func displayGetCityList(_ viewModel: CityList.GetCityList.ViewModel)
}

class CityListViewController: UIViewController, CityListDisplayLogic {
  override var preferredStatusBarStyle: UIStatusBarStyle {
    return .lightContent
  }

  // MARK: - IBOutlets:
  @IBOutlet weak var cityListTableView: UITableView!

  // MARK: - IBActions:

  // MARK: - Model:
  var interactor: CityListBusinessLogic?
  var router: (NSObjectProtocol & CityListRoutingLogic & CityListDataPassing)?
  var cityList: [CityListCellVM] = []

  // MARK: - View Life Cycle:
  override func viewDidLoad() {
    super.viewDidLoad()
    self.setupUI()
    self.getCityListOnLaunch()
  }

  // MARK: - Public Funcs (Use cases):
  func register(newCity: PWCity) {
    
  }

  func getCityListOnLaunch() {
    let request = CityList.GetCityList.Request()
    self.interactor?.getCityList(request)
  }

  func displayGetCityList(_ viewModel: CityList.GetCityList.ViewModel) {
    self.cityList = viewModel.cityList
    self.cityListTableView.reloadData()
  }

  // MARK: - Private Funcs:
  private func setupUI() {
    self.setupCityListTableView()
  }

  private func setupCityListTableView() {
    self.cityListTableView.register(CityListItemCell.nib, forCellReuseIdentifier: CityListItemCell.identifier)
    self.cityListTableView.register(CityListActionCell.nib, forCellReuseIdentifier: CityListActionCell.identifier)
    self.cityListTableView.dataSource = self
    self.cityListTableView.delegate = self
    self.cityListTableView.estimatedRowHeight = 80.0
    self.cityListTableView.rowHeight = UITableView.automaticDimension
  }

  // MARK: - VIP Setup:
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }

  required init?(coder aDecoder: NSCoder) {
    super.init(coder: aDecoder)
    setup()
  }

  private func setup() {
    let viewController = self
    let interactor = CityListInteractor()
    let presenter = CityListPresenter()
    let router = CityListRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
}

extension CityListViewController: UITableViewDataSource {
  func numberOfSections(in tableView: UITableView) -> Int {
    return 1
  }

  func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
    return self.cityList.count
  }

  func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
    let viewModel = self.cityList[indexPath.row]

    switch viewModel {
    case let itemCellVM as CityListItemCell.ViewModel:
      guard let cell = tableView.dequeueReusableCell(withIdentifier: CityListItemCell.identifier, for: indexPath) as? CityListItemCell else {
        fatalError("item cell not configured")
      }
      cell.viewModel = itemCellVM
      return cell
    case let actionCellVM as CityListActionCell.ViewModel:
      guard let cell = tableView.dequeueReusableCell(withIdentifier: CityListActionCell.identifier, for: indexPath) as? CityListActionCell else {
        fatalError("action cell not configured")
      }
      cell.viewModel = actionCellVM
      cell.delegate = self
      return cell
    default:
      fatalError("cell not configured")
    }
  }
}

extension CityListViewController: UITableViewDelegate {
  
}

extension CityListViewController: CityListActionCellDelegate {
  func addCityTapped(on cell: CityListActionCell) {
    let citySearchVC = CitySearchViewController.instantiate()
    self.present(citySearchVC, animated: true, completion: nil)
  }

  func toggleUnitSystem(to newSystem: PWUnitSystem, on cell: CityListActionCell) {
    let request = CityList.ToggleUnitSystem.Request(newUnitSystem: newSystem)
    self.interactor?.toggleUnitSystem(request)
  }
}
