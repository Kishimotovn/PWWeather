//
//  CityListInteractor.swift
//  PocketWorksWeather
//
//  Created by Anh Phan Tran on 27/07/2019.
//  Copyright (c) 2019 Anh Phan Tran. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Promises

protocol CityListBusinessLogic {
  func getCityList(_ request: CityList.GetCityList.Request)
  func toggleUnitSystem(_ request: CityList.ToggleUnitSystem.Request)
  func registerNewCity(_ request: CityList.RegisterNewCity.Request)
  func removeCity(_ request: CityList.RemoveCity.Request)
  func selectCity(_ request: CityList.SelectCity.Request)
}

protocol CityListDataStore {
  var selectedWeatherData: CityWeatherResponse? { get }
}

class CityListInteractor: CityListBusinessLogic, CityListDataStore {
  // MARK: - Model:
  var presenter: CityListPresentationLogic?
  var worker: CityListWorker = CityListWorker(apiService: PWSession.shared.apiService,
                                              cityListProvider: PWSession.shared)
  var currentCities: [PWCity] = []
  var currentWeatherData: [CityWeatherResponse] = []

  var reloadTimer: Timer?
  let reloadTimeInterval: TimeInterval = 10*60 // 10 minutes per reload (as suggested by api)
  var selectedWeatherData: CityWeatherResponse?

  // MARK: - Public Funcs (Use cases):
  func getCityList(_ request: CityList.GetCityList.Request) {
    self.reloadTimer?.invalidate()
    self.reloadTimer = Timer.scheduledTimer(withTimeInterval: reloadTimeInterval,
                                            repeats: true) { _ in
      self.reloadWeatherData()
    }
    self.reloadTimer?.fire()
  }

  func toggleUnitSystem(_ request: CityList.ToggleUnitSystem.Request) {
    PWSession.shared.unitSystem = request.newUnitSystem
    let response = CityList.GetCityList.Response(
      weatherData: self.currentWeatherData,
      unitSystem: PWSession.shared.unitSystem)
    self.presenter?.presentGetCityList(response)
  }

  func registerNewCity(_ request: CityList.RegisterNewCity.Request) {
    let requestedCity = request.city
    guard !self.currentCities.contains(requestedCity) else {
      return
    }

    self.toggleReloadStatus(to: true)
    self.worker.getWeatherData(for: requestedCity)
    .always {
      self.toggleReloadStatus(to: false)
    }.then { response in
      PWSession.shared.cityIdList.append(requestedCity.id)
      self.currentCities.append(requestedCity)
      self.currentWeatherData.append(response)

      let response = CityList.RegisterNewCity.Response(weatherData: response)
      self.presenter?.presentRegisterNewCity(response)
    }
  }

  func removeCity(_ request: CityList.RemoveCity.Request) {
    let selectedIndex = request.selectedIndex
    guard selectedIndex >= 0, self.currentCities.count > selectedIndex else {
      return
    }
    let cityId = self.currentCities[selectedIndex].id

    self.currentCities.remove(at: selectedIndex)
    self.currentWeatherData.remove(at: selectedIndex)
    PWSession.shared.cityIdList.removeAll(where: { return $0 == cityId })
  }

  func selectCity(_ request: CityList.SelectCity.Request) {
    let selectedIndex = request.selectedIndex

    guard selectedIndex >= 0, self.currentWeatherData.count > selectedIndex else {
      return
    }

    self.selectedWeatherData = self.currentWeatherData[selectedIndex]
    let response = CityList.SelectCity.Response()
    self.presenter?.presentSelectCity(response)
  }

  // MARK: - Private Funcs:
  private func reloadWeatherData() {
    let cityIds = PWSession.shared.cityIdList

    self.toggleReloadStatus(to: true)
    all(self.worker.getWeatherData(for: cityIds), self.worker.getCities(for: cityIds))
      .then { weatherData, cities in
        self.currentCities = cities
        self.currentWeatherData = weatherData

        let response = CityList.GetCityList.Response(
          weatherData: weatherData,
          unitSystem: PWSession.shared.unitSystem)
        self.presenter?.presentGetCityList(response)
      }.catch { error in
        print(error.localizedDescription)
      }.always {
        self.toggleReloadStatus(to: false)
    }
  }

  private func toggleReloadStatus(to reloadStatus: Bool) {
    let response = CityList.ReloadWeatherData.Response(isReloading: reloadStatus)
    self.presenter?.presentReloadWeatherData(response)
  }
}
