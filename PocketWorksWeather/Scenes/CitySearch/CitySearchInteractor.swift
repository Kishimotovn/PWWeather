//
//  CitySearchInteractor.swift
//  PocketWorksWeather
//
//  Created by Anh Phan Tran on 27/07/2019.
//  Copyright (c) 2019 Anh Phan Tran. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Promises

protocol CitySearchBusinessLogic {
  func updateResults(_ request: CitySearch.UpdateResults.Request)
}

protocol CitySearchDataStore {
}

class CitySearchInteractor: CitySearchBusinessLogic, CitySearchDataStore
{
  // MARK: - Model:
  var presenter: CitySearchPresentationLogic?
  var worker: CitySearchWorker = CitySearchWorker(cityListProvider: PWSession.shared)
  var currentSearchTerm = ""

  // MARK: - Public Funcs (Use cases):
  func updateResults(_ request: CitySearch.UpdateResults.Request) {
    let searchTerm = request.searchTerm
    self.currentSearchTerm = searchTerm

    self.toggleValidating(to: true)
    self.worker.searchForCity(using: searchTerm)
      .validate(on: DispatchQueue.global(qos: .userInteractive), { _ in return self.currentSearchTerm == searchTerm })
      .always {
        self.toggleValidating(to: false)
      }
      .then(on: DispatchQueue.main) { results in
        let response = CitySearch.UpdateResults.Response(searchTerm: searchTerm,
                                                         results: results)
        self.presenter?.presentUpdateResults(response)
      }
  }

  // MARK: - Private Funcs:
  private func toggleValidating(to isValidating: Bool) {
    let response = CitySearch.ValidatingCityName.Response(isValidating: isValidating)
    self.presenter?.presentValidatingCityName(response)
  }
}
