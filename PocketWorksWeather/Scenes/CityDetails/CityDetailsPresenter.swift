//
//  CityDetailsPresenter.swift
//  PocketWorksWeather
//
//  Created by Anh Phan Tran on 28/07/2019.
//  Copyright (c) 2019 Anh Phan Tran. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CityDetailsPresentationLogic {
  func presentShowWeather(_ response: CityDetails.ShowWeather.Response)
  func presentGetForecastData(_ response: CityDetails.GetForecastData.Response)
  func presentToggleForecastLoading(_ response: CityDetails.ToggleForecastLoading.Response)
  func presentShowError(_ response: CityDetails.ShowError.Response)
}

class CityDetailsPresenter: CityDetailsPresentationLogic {
  // MARK: - Model:
  weak var viewController: CityDetailsDisplayLogic?
  private lazy var weekDayDateFormatter: DateFormatter = {
    let dateFormatter = DateFormatter()
    dateFormatter.timeZone = TimeZone(secondsFromGMT: 0)
    dateFormatter.dateFormat = "EEEE"
    return dateFormatter
  }()

  private lazy var timeFormatter: DateFormatter = {
    let dateFormatter = DateFormatter()
    dateFormatter.timeZone = TimeZone(secondsFromGMT: 0)
    dateFormatter.dateFormat = "HH:mm"
    return dateFormatter
  }()

  private lazy var measurementFormatter: MeasurementFormatter = {
    let formatter = MeasurementFormatter()
    formatter.unitOptions = .providedUnit
    return formatter
  }()

  // MARK: - Public Funcs (Use cases):
  func presentShowWeather(_ response: CityDetails.ShowWeather.Response) {
    let weatherData = response.weatherData
    let cityName = weatherData.name ?? "N/A"
    let mainWeather = weatherData.weather?.first?.main ?? ""
    let windInfo = self.buildWindInfoString(from: weatherData.wind, baseFontSize: 33)
    let localDate = Date().addingTimeInterval(weatherData.sys?.timezone ?? 0)
    let weekDay = self.weekDayDateFormatter.string(from: localDate)
    let maximumTemp = (weatherData.main?.tempMax ?? 0.0).tempString(for: PWSession.shared.unitSystem)
    let minimumTemp = (weatherData.main?.tempMin ?? 0.0).tempString(for: PWSession.shared.unitSystem)
    let weatherDescription = self.buildWeatherDescription(from: weatherData)
    let currentTemperature = (weatherData.main?.temp ?? 0.0).tempString(for: PWSession.shared.unitSystem)
    let humidityLevel = self.buildHumidity(from: weatherData.main?.humidity)
    let sunrise = self.buildTimeString(from: weatherData.sys?.sunrise?.addingTimeInterval(weatherData.sys?.timezone ?? 0))
    let sunset = self.buildTimeString(from: weatherData.sys?.sunset?.addingTimeInterval(weatherData.sys?.timezone ?? 0))
    let pressure = self.buildPressureString(from: weatherData.main?.pressure)
    let visibility = self.buildVisibilityString(from: weatherData.visibility)

    let viewModel = CityDetails.ShowWeather.ViewModel(
      cityName: cityName,
      mainWeather: mainWeather,
      windInfo: windInfo,
      weekDay: weekDay,
      maximumTemp: maximumTemp,
      minimumTemp: minimumTemp,
      weatherDescription: weatherDescription,
      currentTemperature: currentTemperature,
      humidityLevel: humidityLevel,
      sunrise: sunrise,
      sunset: sunset,
      pressure: pressure,
      visibility: visibility)

    self.viewController?.displayShowWeather(viewModel)
  }

  func presentGetForecastData(_ response: CityDetails.GetForecastData.Response) {
    let forecastVMs = response.forecastData.map {
      return buildForecastVM(from: $0, timezoneOffset: response.timezoneOffset)
    }
    let viewModel = CityDetails.GetForecastData.ViewModel(forecastVMs: forecastVMs)
    self.viewController?.displayGetForecastData(viewModel)
  }

  func presentToggleForecastLoading(_ response: CityDetails.ToggleForecastLoading.Response) {
    let viewModel = CityDetails.ToggleForecastLoading.ViewModel(isLoading: response.isLoading)
    self.viewController?.displayToggleForecastLoading(viewModel)
  }

  func presentShowError(_ response: CityDetails.ShowError.Response) {
    let viewModel = CityDetails.ShowError.ViewModel(errorString: response.error.localizedDescription)
    self.viewController?.displayShowError(viewModel)
  }

  // MARK: - Private Funcs:
  private func buildForecastVM(from weatherData: CityWeatherResponse, timezoneOffset: Double) -> WindForecastCell.ViewModel {
    let time = self.buildTimeString(from: weatherData.dt?.addingTimeInterval(timezoneOffset))
    let iconName = weatherData.weather?.first?.icon ?? "10d"
    let iconURL = URL(string: "http://openweathermap.org/img/wn/\(iconName)@2x.png")
    let windInfo = self.buildWindInfoString(from: weatherData.wind, baseFontSize: 12)

    return WindForecastCell.ViewModel(
      time: time,
      imageUrl: iconURL,
      windInfo: windInfo)
  }

  private func buildWindInfoString(from windData: CityWindResponse?, baseFontSize: CGFloat) -> NSAttributedString {
    let windSpeed = windData?.speed ?? 0.0
    let windDirectionString = NSMutableAttributedString()
    if let windDirection = windData?.deg {
      let direction = WindDirection(windDirection)
      let directionString = NSAttributedString(string: "\(direction) ".uppercased())
        .applyForegroundColor(.white)
        .applyFont(UIFont.systemFont(ofSize: baseFontSize, weight: .medium))
      windDirectionString.append(directionString)
    }
    let windSpeedString = NSAttributedString(string: windSpeed.windSpeedString(for: PWSession.shared.unitSystem))
      .applyFont(UIFont.systemFont(ofSize: baseFontSize * 1.4, weight: .thin))
      .applyForegroundColor(.white)
    windDirectionString.append(windSpeedString)

    return windDirectionString
  }

  private func buildWeatherDescription(from weatherData: CityWeatherResponse) -> String {
    let mainDescription = weatherData.weather?.first?.description ?? "N/A"
    let currentTemperature = (weatherData.main?.temp ?? 0).tempString(for: PWSession.shared.unitSystem)
    let currentMaxTemperature = (weatherData.main?.tempMax ?? 0).tempString(for: PWSession.shared.unitSystem)
    
    return "Today: \(mainDescription). It's \(currentTemperature); the high today was forecast as \(currentMaxTemperature)"
  }

  private func buildHumidity(from humidityLevel: Double?) -> String {
    if let validHumidityLevel = humidityLevel {
      return "\(Int(validHumidityLevel))%"
    }
    return "N/A"
  }

  private func buildTimeString(from date: Date?) -> String {
    if let validDate = date {
      return self.timeFormatter.string(from: validDate)
    }
    return "N/A"
  }

  private func buildPressureString(from pressureData: Double?) -> String {
    if let validPressureData = pressureData {
      let measurement = Measurement(value: validPressureData, unit: UnitPressure.hectopascals)
      return self.measurementFormatter.string(from: measurement)
    }
    return "N/A"
  }

  private func buildVisibilityString(from visibilityData: Double?) -> String {
    if let validVisibilityData = visibilityData {
      return validVisibilityData.visibilityString(for: PWSession.shared.unitSystem)
    }
    return "N/A"
  }
}
